Goroutine
- seperti proses async 
- berjalan secara concurrency tapi jika laptop multicore maka berjalan secara async (mendahulukan proses yang kecil dulu)
- tidak disarankan untuk function yang mempunyai return value
- go test -v -run=TestCreateGoroutine
- go test -v -run=TestManyGoroutine

Channel
- agar goroutine berjalan secara synchronus
- bisa menerima return value dari function
- impmentasi seperti async await di javascript
- hanya bisa menerima satu jenis data (string/int,dll)
- channel harus di close jika tidak digunakan, bisa menyebabkan memory leak
- go test -v -run=TestCreateChannel
- go test -v -run=TestChannelAsParameter
- go test -v -run=TestInOutChannel
- go test -v -run=TestBufferedChannel
- go test -v -run=TestRangeChannel
- go test -v -run=TestSelectChannel
- go test -v -run=TestDefaultSelectChannel

Race Condition
- kasus dimana varibel di dalam goroutine berjalan secara paralel (bersamaan) jadinya variable tidak sesuai
- go test -v -run=TestRaceCondition

Mutex (Mutual Exclusion)
- solusi kasus dari race condition
- kekurangannya aplikasi lebih lambat sedikit
- keuntungannya variable menjadi konsisten
- go test -v -run=TestMutex

RW Mutex (Read Write Mutex)
- akan rebutan antara proses membaca dan mengubah
- go test -v -run=TestRWMutex

Deadlock
- proses goroutine menunggu lock sehingga tidak ada satupun go yang bisa jalan
- go test -v -run=TestDeadlock

Waitgroup
- karena goroutine berjalan secara async
- digunakan untuk menunggu sebuah proses dilakukan
- wajib panggil function Done()
- go test -v -run=TestWaitGroup

Sync Once
- function di eksekusi hanya sekali saja
- go test -v -run=TestOnce

Pool
- implementasi design pattern bernama object pool patter 
- digunkaan untuk menyimpan data
- digunakan manage koneksi database
- terhindar dari race condition
- setelah di Get(), maka data langsung hilang
- go test -v -run=TestPool

Sync Map
- mirip tipe data map
- aman dari race condition
- go test -v -run=TestMap